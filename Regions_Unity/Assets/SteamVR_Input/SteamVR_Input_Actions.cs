//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Boolean p_default_InteractUI;
        
        private static SteamVR_Action_Boolean p_default_Teleport;
        
        private static SteamVR_Action_Boolean p_default_GrabPinch;
        
        private static SteamVR_Action_Boolean p_default_GrabGrip;
        
        private static SteamVR_Action_Pose p_default_Pose;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonRightHand;
        
        private static SteamVR_Action_Single p_default_Squeeze;
        
        private static SteamVR_Action_Boolean p_default_HeadsetOnHead;
        
        private static SteamVR_Action_Boolean p_default_SnapTurnLeft;
        
        private static SteamVR_Action_Boolean p_default_SnapTurnRight;
        
        private static SteamVR_Action_Vibration p_default_Haptic;
        
        private static SteamVR_Action_Vector2 p_platformer_Move;
        
        private static SteamVR_Action_Boolean p_platformer_Jump;
        
        private static SteamVR_Action_Vector2 p_buggy_Steering;
        
        private static SteamVR_Action_Single p_buggy_Throttle;
        
        private static SteamVR_Action_Boolean p_buggy_Brake;
        
        private static SteamVR_Action_Boolean p_buggy_Reset;
        
        private static SteamVR_Action_Pose p_mixedreality_ExternalCamera;
        
        private static SteamVR_Action_Pose p_landmarks_Pose;
        
        private static SteamVR_Action_Skeleton p_landmarks_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_landmarks_SkeletonRightHand;
        
        private static SteamVR_Action_Boolean p_landmarks_TriggerButton;
        
        private static SteamVR_Action_Boolean p_landmarks_GripButton;
        
        private static SteamVR_Action_Boolean p_landmarks_TouchpadButton;
        
        private static SteamVR_Action_Boolean p_landmarks_UpperButton;
        
        private static SteamVR_Action_Boolean p_landmarks_LowerButton;
        
        private static SteamVR_Action_Single p_landmarks_TriggerSqueeze;
        
        private static SteamVR_Action_Single p_landmarks_GripSqueeze;
        
        private static SteamVR_Action_Boolean p_landmarks_TriggerTouch;
        
        private static SteamVR_Action_Boolean p_landmarks_GripTouch;
        
        private static SteamVR_Action_Boolean p_landmarks_TouchpadTouch;
        
        private static SteamVR_Action_Boolean p_landmarks_UpperTouch;
        
        private static SteamVR_Action_Boolean p_landmarks_LowerTouch;
        
        private static SteamVR_Action_Vector2 p_landmarks_TouchpadPosition;
        
        private static SteamVR_Action_Boolean p_landmarks_HeadsetOnHead;
        
        private static SteamVR_Action_Vibration p_landmarks_Haptic;
        
        public static SteamVR_Action_Boolean default_InteractUI
        {
            get
            {
                return SteamVR_Actions.p_default_InteractUI.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_Teleport
        {
            get
            {
                return SteamVR_Actions.p_default_Teleport.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_GrabPinch
        {
            get
            {
                return SteamVR_Actions.p_default_GrabPinch.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_GrabGrip
        {
            get
            {
                return SteamVR_Actions.p_default_GrabGrip.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose default_Pose
        {
            get
            {
                return SteamVR_Actions.p_default_Pose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonLeftHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonRightHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Single default_Squeeze
        {
            get
            {
                return SteamVR_Actions.p_default_Squeeze.GetCopy<SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean default_HeadsetOnHead
        {
            get
            {
                return SteamVR_Actions.p_default_HeadsetOnHead.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_SnapTurnLeft
        {
            get
            {
                return SteamVR_Actions.p_default_SnapTurnLeft.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_SnapTurnRight
        {
            get
            {
                return SteamVR_Actions.p_default_SnapTurnRight.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration default_Haptic
        {
            get
            {
                return SteamVR_Actions.p_default_Haptic.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Vector2 platformer_Move
        {
            get
            {
                return SteamVR_Actions.p_platformer_Move.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean platformer_Jump
        {
            get
            {
                return SteamVR_Actions.p_platformer_Jump.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 buggy_Steering
        {
            get
            {
                return SteamVR_Actions.p_buggy_Steering.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Single buggy_Throttle
        {
            get
            {
                return SteamVR_Actions.p_buggy_Throttle.GetCopy<SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Brake
        {
            get
            {
                return SteamVR_Actions.p_buggy_Brake.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Reset
        {
            get
            {
                return SteamVR_Actions.p_buggy_Reset.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose mixedreality_ExternalCamera
        {
            get
            {
                return SteamVR_Actions.p_mixedreality_ExternalCamera.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Pose landmarks_Pose
        {
            get
            {
                return SteamVR_Actions.p_landmarks_Pose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Skeleton landmarks_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_landmarks_SkeletonLeftHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton landmarks_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_landmarks_SkeletonRightHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_TriggerButton
        {
            get
            {
                return SteamVR_Actions.p_landmarks_TriggerButton.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_GripButton
        {
            get
            {
                return SteamVR_Actions.p_landmarks_GripButton.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_TouchpadButton
        {
            get
            {
                return SteamVR_Actions.p_landmarks_TouchpadButton.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_UpperButton
        {
            get
            {
                return SteamVR_Actions.p_landmarks_UpperButton.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_LowerButton
        {
            get
            {
                return SteamVR_Actions.p_landmarks_LowerButton.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Single landmarks_TriggerSqueeze
        {
            get
            {
                return SteamVR_Actions.p_landmarks_TriggerSqueeze.GetCopy<SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Single landmarks_GripSqueeze
        {
            get
            {
                return SteamVR_Actions.p_landmarks_GripSqueeze.GetCopy<SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_TriggerTouch
        {
            get
            {
                return SteamVR_Actions.p_landmarks_TriggerTouch.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_GripTouch
        {
            get
            {
                return SteamVR_Actions.p_landmarks_GripTouch.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_TouchpadTouch
        {
            get
            {
                return SteamVR_Actions.p_landmarks_TouchpadTouch.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_UpperTouch
        {
            get
            {
                return SteamVR_Actions.p_landmarks_UpperTouch.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_LowerTouch
        {
            get
            {
                return SteamVR_Actions.p_landmarks_LowerTouch.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 landmarks_TouchpadPosition
        {
            get
            {
                return SteamVR_Actions.p_landmarks_TouchpadPosition.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean landmarks_HeadsetOnHead
        {
            get
            {
                return SteamVR_Actions.p_landmarks_HeadsetOnHead.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration landmarks_Haptic
        {
            get
            {
                return SteamVR_Actions.p_landmarks_Haptic.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_SnapTurnLeft,
                    SteamVR_Actions.default_SnapTurnRight,
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.mixedreality_ExternalCamera,
                    SteamVR_Actions.landmarks_Pose,
                    SteamVR_Actions.landmarks_SkeletonLeftHand,
                    SteamVR_Actions.landmarks_SkeletonRightHand,
                    SteamVR_Actions.landmarks_TriggerButton,
                    SteamVR_Actions.landmarks_GripButton,
                    SteamVR_Actions.landmarks_TouchpadButton,
                    SteamVR_Actions.landmarks_UpperButton,
                    SteamVR_Actions.landmarks_LowerButton,
                    SteamVR_Actions.landmarks_TriggerSqueeze,
                    SteamVR_Actions.landmarks_GripSqueeze,
                    SteamVR_Actions.landmarks_TriggerTouch,
                    SteamVR_Actions.landmarks_GripTouch,
                    SteamVR_Actions.landmarks_TouchpadTouch,
                    SteamVR_Actions.landmarks_UpperTouch,
                    SteamVR_Actions.landmarks_LowerTouch,
                    SteamVR_Actions.landmarks_TouchpadPosition,
                    SteamVR_Actions.landmarks_HeadsetOnHead,
                    SteamVR_Actions.landmarks_Haptic};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_SnapTurnLeft,
                    SteamVR_Actions.default_SnapTurnRight,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.mixedreality_ExternalCamera,
                    SteamVR_Actions.landmarks_Pose,
                    SteamVR_Actions.landmarks_SkeletonLeftHand,
                    SteamVR_Actions.landmarks_SkeletonRightHand,
                    SteamVR_Actions.landmarks_TriggerButton,
                    SteamVR_Actions.landmarks_GripButton,
                    SteamVR_Actions.landmarks_TouchpadButton,
                    SteamVR_Actions.landmarks_UpperButton,
                    SteamVR_Actions.landmarks_LowerButton,
                    SteamVR_Actions.landmarks_TriggerSqueeze,
                    SteamVR_Actions.landmarks_GripSqueeze,
                    SteamVR_Actions.landmarks_TriggerTouch,
                    SteamVR_Actions.landmarks_GripTouch,
                    SteamVR_Actions.landmarks_TouchpadTouch,
                    SteamVR_Actions.landmarks_UpperTouch,
                    SteamVR_Actions.landmarks_LowerTouch,
                    SteamVR_Actions.landmarks_TouchpadPosition,
                    SteamVR_Actions.landmarks_HeadsetOnHead};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[] {
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.landmarks_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[] {
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.landmarks_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[] {
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.mixedreality_ExternalCamera,
                    SteamVR_Actions.landmarks_Pose};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_SnapTurnLeft,
                    SteamVR_Actions.default_SnapTurnRight,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.landmarks_TriggerButton,
                    SteamVR_Actions.landmarks_GripButton,
                    SteamVR_Actions.landmarks_TouchpadButton,
                    SteamVR_Actions.landmarks_UpperButton,
                    SteamVR_Actions.landmarks_LowerButton,
                    SteamVR_Actions.landmarks_TriggerTouch,
                    SteamVR_Actions.landmarks_GripTouch,
                    SteamVR_Actions.landmarks_TouchpadTouch,
                    SteamVR_Actions.landmarks_UpperTouch,
                    SteamVR_Actions.landmarks_LowerTouch,
                    SteamVR_Actions.landmarks_HeadsetOnHead};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[] {
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.landmarks_TriggerSqueeze,
                    SteamVR_Actions.landmarks_GripSqueeze};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[] {
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.landmarks_TouchpadPosition};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[] {
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.landmarks_SkeletonLeftHand,
                    SteamVR_Actions.landmarks_SkeletonRightHand};
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_GrabPinch,
                    SteamVR_Actions.default_GrabGrip,
                    SteamVR_Actions.default_Squeeze,
                    SteamVR_Actions.default_HeadsetOnHead,
                    SteamVR_Actions.default_SnapTurnLeft,
                    SteamVR_Actions.default_SnapTurnRight,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.landmarks_TriggerButton,
                    SteamVR_Actions.landmarks_GripButton,
                    SteamVR_Actions.landmarks_TouchpadButton,
                    SteamVR_Actions.landmarks_UpperButton,
                    SteamVR_Actions.landmarks_LowerButton,
                    SteamVR_Actions.landmarks_TriggerSqueeze,
                    SteamVR_Actions.landmarks_GripSqueeze,
                    SteamVR_Actions.landmarks_TriggerTouch,
                    SteamVR_Actions.landmarks_GripTouch,
                    SteamVR_Actions.landmarks_TouchpadTouch,
                    SteamVR_Actions.landmarks_UpperTouch,
                    SteamVR_Actions.landmarks_LowerTouch,
                    SteamVR_Actions.landmarks_TouchpadPosition,
                    SteamVR_Actions.landmarks_HeadsetOnHead};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_default_InteractUI = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/InteractUI")));
            SteamVR_Actions.p_default_Teleport = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/Teleport")));
            SteamVR_Actions.p_default_GrabPinch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/GrabPinch")));
            SteamVR_Actions.p_default_GrabGrip = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/GrabGrip")));
            SteamVR_Actions.p_default_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/default/in/Pose")));
            SteamVR_Actions.p_default_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/default/in/SkeletonLeftHand")));
            SteamVR_Actions.p_default_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/default/in/SkeletonRightHand")));
            SteamVR_Actions.p_default_Squeeze = ((SteamVR_Action_Single)(SteamVR_Action.Create<SteamVR_Action_Single>("/actions/default/in/Squeeze")));
            SteamVR_Actions.p_default_HeadsetOnHead = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/HeadsetOnHead")));
            SteamVR_Actions.p_default_SnapTurnLeft = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/SnapTurnLeft")));
            SteamVR_Actions.p_default_SnapTurnRight = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/SnapTurnRight")));
            SteamVR_Actions.p_default_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/default/out/Haptic")));
            SteamVR_Actions.p_platformer_Move = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/platformer/in/Move")));
            SteamVR_Actions.p_platformer_Jump = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/platformer/in/Jump")));
            SteamVR_Actions.p_buggy_Steering = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/buggy/in/Steering")));
            SteamVR_Actions.p_buggy_Throttle = ((SteamVR_Action_Single)(SteamVR_Action.Create<SteamVR_Action_Single>("/actions/buggy/in/Throttle")));
            SteamVR_Actions.p_buggy_Brake = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/buggy/in/Brake")));
            SteamVR_Actions.p_buggy_Reset = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/buggy/in/Reset")));
            SteamVR_Actions.p_mixedreality_ExternalCamera = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/mixedreality/in/ExternalCamera")));
            SteamVR_Actions.p_landmarks_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/landmarks/in/Pose")));
            SteamVR_Actions.p_landmarks_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/landmarks/in/SkeletonLeftHand")));
            SteamVR_Actions.p_landmarks_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/landmarks/in/SkeletonRightHand")));
            SteamVR_Actions.p_landmarks_TriggerButton = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/TriggerButton")));
            SteamVR_Actions.p_landmarks_GripButton = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/GripButton")));
            SteamVR_Actions.p_landmarks_TouchpadButton = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/TouchpadButton")));
            SteamVR_Actions.p_landmarks_UpperButton = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/UpperButton")));
            SteamVR_Actions.p_landmarks_LowerButton = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/LowerButton")));
            SteamVR_Actions.p_landmarks_TriggerSqueeze = ((SteamVR_Action_Single)(SteamVR_Action.Create<SteamVR_Action_Single>("/actions/landmarks/in/TriggerSqueeze")));
            SteamVR_Actions.p_landmarks_GripSqueeze = ((SteamVR_Action_Single)(SteamVR_Action.Create<SteamVR_Action_Single>("/actions/landmarks/in/GripSqueeze")));
            SteamVR_Actions.p_landmarks_TriggerTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/TriggerTouch")));
            SteamVR_Actions.p_landmarks_GripTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/GripTouch")));
            SteamVR_Actions.p_landmarks_TouchpadTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/TouchpadTouch")));
            SteamVR_Actions.p_landmarks_UpperTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/UpperTouch")));
            SteamVR_Actions.p_landmarks_LowerTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/LowerTouch")));
            SteamVR_Actions.p_landmarks_TouchpadPosition = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/landmarks/in/TouchpadPosition")));
            SteamVR_Actions.p_landmarks_HeadsetOnHead = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/landmarks/in/HeadsetOnHead")));
            SteamVR_Actions.p_landmarks_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/landmarks/out/Haptic")));
        }
    }
}
